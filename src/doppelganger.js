// Generated by CoffeeScript 1.8.0
var Doppelganger, configuration, consul, copy, deregister, http, register, series, servicediff, url_parse,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

consul = require('consul-utils');

configuration = require('./configuration');

servicediff = require('./servicediff');

series = require('./series');

url_parse = require('url').parse;

http = require('http');

deregister = function(httpAddr, id, callback) {
  return http.get("" + httpAddr + "/v1/agent/service/deregister/" + id, function(res) {
    return callback(null);
  }).on('error', callback);
};

register = function(httpAddr, service, callback) {
  var params, res;
  params = url_parse(httpAddr);
  params.path = '/v1/agent/service/register';
  params.method = 'PUT';
  res = http.request(params, function(res) {
    return callback(null);
  }).on('error', callback);
  res.write(JSON.stringify(service));
  return res.end();
};

copy = function(source, target) {
  var key, value, _results;
  _results = [];
  for (key in source) {
    value = source[key];
    if (typeof value === 'object') {
      if ((target[key] == null) || typeof target[key] !== 'object') {
        target[key] = {};
      }
      _results.push(copy(value, target[key]));
    } else {
      _results.push(target[key] = value);
    }
  }
  return _results;
};

module.exports = Doppelganger = (function() {
  function Doppelganger(options) {
    this.close = __bind(this.close, this);
    this.update = __bind(this.update, this);
    this.tick = __bind(this.tick, this);
    this.error = __bind(this.error, this);
    var noop, _ref;
    this._options = {
      configurationdir: process.cwd(),
      consulhost: (_ref = process.env.CONSUL_HOST) != null ? _ref : '127.0.0.1:8500',
      refresh: false
    };
    copy(options, this._options);
    if (this._options.consulhost.indexOf('http://') !== 0) {
      this._options.consulhost = "http://" + this._options.consulhost;
    }
    this.tick();
    noop = function() {};
    this._interval = this._options.refresh ? setInterval(this.tick, this._options.refresh) : setInterval(noop, 60000);
  }

  Doppelganger.prototype.error = function(error) {
    if (error.stack != null) {
      return console.error(error.stack);
    } else {
      return console.error(error);
    }
  };

  Doppelganger.prototype.tick = function() {
    return configuration(this._options.configurationdir, (function(_this) {
      return function(errors, config) {
        var e, _i, _len;
        if (errors != null) {
          for (_i = 0, _len = errors.length; _i < _len; _i++) {
            e = errors[_i];
            _this.error(e);
          }
          return;
        }
        return consul.AgentServices(_this._options.consulhost, function(errs, services) {
          var tasks, _j, _len1;
          if (errors != null) {
            for (_j = 0, _len1 = errors.length; _j < _len1; _j++) {
              e = errors[_j];
              _this.error(e);
            }
            return;
          }
          tasks = [];
          return _this.update(servicediff(services, config));
        });
      };
    })(this));
  };

  Doppelganger.prototype.update = function(diff) {
    var id, service, tasks, _, _fn, _fn1, _fn2, _ref, _ref1, _ref2;
    tasks = [];
    _ref = diff.removed;
    _fn = (function(_this) {
      return function(id) {
        return tasks.push(function(cb) {
          console.log("Deleting " + id + "...");
          return deregister(_this._options.consulhost, id, function(err) {
            if (err != null) {
              _this.error(err);
            }
            return cb();
          });
        });
      };
    })(this);
    for (id in _ref) {
      _ = _ref[id];
      _fn(id);
    }
    _ref1 = diff.modified;
    _fn1 = (function(_this) {
      return function(id, service) {
        return tasks.push(function(cb) {
          console.log("Recreating " + id + "...");
          return deregister(_this._options.consulhost, id, function(err) {
            if (err != null) {
              _this.error(err);
            }
            return register(_this._options.consulhost, service, function(err) {
              if (err != null) {
                _this.error(err);
              }
              return cb();
            });
          });
        });
      };
    })(this);
    for (id in _ref1) {
      service = _ref1[id];
      _fn1(id, service);
    }
    _ref2 = diff.added;
    _fn2 = (function(_this) {
      return function(id, service) {
        return tasks.push(function(cb) {
          console.log("Creating " + id + "...");
          return register(_this._options.consulhost, service, function(err) {
            if (err != null) {
              _this.error(err);
            }
            return cb();
          });
        });
      };
    })(this);
    for (id in _ref2) {
      service = _ref2[id];
      _fn2(id, service);
    }
    if (tasks.length === 0) {
      return console.log('Everything is up to date');
    } else {
      return series(tasks, (function(_this) {
        return function() {
          return console.log('Doppelganger changes complete');
        };
      })(this));
    }
  };

  Doppelganger.prototype.close = function() {
    return clearInterval(this._interval);
  };

  return Doppelganger;

})();

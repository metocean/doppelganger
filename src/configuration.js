// Generated by CoffeeScript 1.8.0
var DOPPELGANGERFormatException, checkvalidation, fs, ischeck, isnumber, isstring, isstringarray, load, parallel, template, validation, yaml,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

yaml = require('js-yaml');

fs = require('fs');

template = require('./template');

parallel = require('./parallel');

isstring = function(s) {
  return typeof s === 'string';
};

isnumber = function(s) {
  return typeof s === 'number';
};

isstringarray = function(s) {
  var i, _i, _len;
  if (!s instanceof Array) {
    return false;
  }
  for (_i = 0, _len = s.length; _i < _len; _i++) {
    i = s[_i];
    if (!isstring(i)) {
      return false;
    }
  }
  return true;
};

ischeck = function(s) {
  var key, value;
  if (!s instanceof Array) {
    return false;
  }
  for (key in c) {
    value = c[key];
    if (validation[key] == null) {
      return false;
    }
    if (!validation[key](value)) {
      return false;
    }
  }
  return true;
};

validation = {
  id: isstring,
  name: isstring,
  tags: isstringarray,
  port: isnumber
};

checkvalidation = {
  script: isstring,
  interval: isstring,
  ttl: isstring
};

DOPPELGANGERFormatException = (function(_super) {
  __extends(DOPPELGANGERFormatException, _super);

  function DOPPELGANGERFormatException(message) {
    this.name = 'DOPPELGANGERFormatException';
    this.message = message;
  }

  return DOPPELGANGERFormatException;

})(Error);

load = function(item, cb) {
  return fs.readFile(item, {
    encoding: 'utf8'
  }, function(err, content) {
    var c, configurations, e, errors, haderror, key, result, results, value, _i, _len;
    if (err != null) {
      return cb([err]);
    }
    try {
      configurations = yaml.safeLoad(content);
    } catch (_error) {
      e = _error;
      if (e != null) {
        return cb([e]);
      }
    }
    if ((configurations == null) || !configurations instanceof Array) {
      return cb([new DOPPELGANGERFormatException('This YAML file is in the wrong format. Doppelganger expects consul service configurations.')]);
    }
    errors = [];
    configurations = template(configurations);
    results = {};
    for (_i = 0, _len = configurations.length; _i < _len; _i++) {
      c = configurations[_i];
      haderror = false;
      for (key in c) {
        value = c[key];
        if (validation[key] == null) {
          errors.push(new DOPPELGANGERFormatException("" + key + " is not a known configuration option."));
          haderror = true;
        } else if (!validation[key](value)) {
          errors.push(new DOPPELGANGERFormatException("" + key + " was an unexpected format."));
          haderror = true;
        }
      }
      if (haderror) {
        continue;
      }
      result = {
        ID: c.id,
        Name: c.name,
        Tags: ['doppelganger'],
        Port: c.port
      };
      if (c.tags != null) {
        result.Tags = result.Tags.concat(c.tags);
      }
      if (result.ID == null) {
        result.ID = result.Name;
      }
      if (result.Port == null) {
        result.Port = 0;
      }
      results[result.ID] = result;
    }
    if (errors.length !== 0) {
      return cb(errors);
    }
    return cb(null, results);
  });
};

module.exports = function(dir, callback) {
  var e, errors, item, items, results, tasks, _fn, _i, _len;
  try {
    items = fs.readdirSync(dir);
  } catch (_error) {
    e = _error;
    return callback([e]);
  }
  tasks = [];
  errors = [];
  results = {};
  _fn = function(item) {
    return tasks.push(function(cb) {
      item = "" + dir + "/" + item;
      return load(item, function(errs, config) {
        var k, v;
        if (errs != null) {
          errors.push({
            path: item,
            errors: errs
          });
          return cb();
        }
        for (k in config) {
          v = config[k];
          results[k] = v;
        }
        return cb();
      });
    });
  };
  for (_i = 0, _len = items.length; _i < _len; _i++) {
    item = items[_i];
    if (!item.match(/\.yml$/)) {
      continue;
    }
    _fn(item);
  }
  return parallel(tasks, function() {
    if (errors.length !== 0) {
      return callback(errors, results);
    }
    return callback(null, results);
  });
};
